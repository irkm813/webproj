4.2	 Backend
A backend fejlesztésére PHP nyelvet használtuk, kezdetleges objektum orientált szemlélettel, figyelembe véve a feladat által megadott specifikációkat.
Front controller (vagy „router”)
Alapelv:
 A front controller ( vagy „router”) egy felettébb kezdetleges MVC (Modell-View-Controller) sémát kíván megvalósítani. A feladat specifikációinak megfelelően minden kérést az index.php szolgál ki, legyen az akár GET, akár POST típusú.  A kérésnek megfelelő tartalmat tölti be, egy egységes sablonba (’layout”).  Hibás kérés esetén (http.404) egyedi hibaüzenet jelenik meg.
A weboldal .htaccess szabályokat használ az olvasható és felhasználóbarát URL-ek érdekében.
Megvalósítás: 
Az index.php példányosítja az ApplicatonController osztályt és definiálja kérés-útvonal párokat.
Az ApplicatonControllerben importálásra és példányosításra kerülnek a Front Controllerhez kötődő osztályok (RouterController, RequestController, ResponseController), illetve egyéb funkciót ellátó osztályok (AuthController, ImageController, ContactController) is.
RouterController: 
Az index.php -ben megadott kérés-útvonal párokat 2 dimenziós tömbként eltárolja. 
Függvények és eljárások:
- get ($path, $callback)  / post($path, $callback)  - $arrays tömb feltöltése
- resolve() – Minden kérésnél meghívásra kerül. Lekéri a kérés útvonalát és típusát, majd az annak megfelelő további függvényt vagy eljárást hívja meg.
-renderLayout() – Az oldal alap sablonját („layoutját”) importálja be.
-renderOnlyView($view) – A paraméterben kapott értékhez tartozó tartalmat tölti be.
- renderView($view) – Meghívja a megjelenítő függvényeket, és a layoutban elhelyezett marker 
( {{content}} ) helyére beilleszti a renderOnlyView() tartalmát.
RequestController: 
Kérésekkel kapcsolatos függvények/eljárások osztálya.
- getPath() – az URL-ből lekéri a „/” utáni részt.
- getMethod() – visszaadja a kérés típusát. 

ResponseController: 
Speciális válaszokkal kapcsolatos függvények/eljárások osztálya.
- setHttpStatus(int $code) – Státuszkód visszaküldése. (pld: 200,400,404 stb..)
- redirect($url) – Oldal átirányítása, $url-ben megadott címre.

Felhasználó kezelés (Authentication)

Alapelv:
Az weboldalra került alapszintű felhasználó kezelés. A felhasználóknak lehetősége van a weboldalra regisztrálni majd azt követően be- és kijelentkezni. Bejelentkezést követően lehetőségük van a galériába fényképet feltölteni. A regisztrációhoz felhasználónevet, vezetéknevet, keresztnevet és jelszót kér az oldal.  Bejelentkezni a felhasználónév, jelszó párossal lehetséges.
A regisztrációnál megadott adatok MySQL adatbázisban kerülnek tárolásra. A jelszó a PHP által natívan támogatott bcrypt kódolással kerül eltárolásra.
Bejelentkezéskor az oldal egy session-ban tárolja el az adatokat, így a böngésző bezárását követően újra bejelentkezni szükséges az oldalra.
Regisztráció vagy bejelentkezés során történt hiba esetén megfelelő hibakezelés. Felhasználó értesítése a hibáról.
Megvalósítás:
 Az ApplicatonController példányosítja az AuthController osztályt.  Az index.php-ben előre definiáltak szerint a  /register, /login és /logout POST kéréseket az AuthController egyes eljárásai kezelik le.
A POST kérések a frontend oldalon elkészített HTML űrlapok beküldése során keletkeznek.
Az AuthController beimportálja és példányosítja a DatabaseController-t, amely felelős a MySQLi kapcsolatért.
AuthController:
-register() - /register POST kérés esetén kerül meghívásra, ellenőrzi a kapott és várt adatok hiánytalanságát, a jelszavak egyezőségét, illetve hogy a regisztálni kívánt felhasználónév nem-e foglalt. Amennyiben minden ellenőrzés sikeres volt létrehozza a felhasználót az adatbázisban.
- login() - /login POST kérés esetén kerül meghívásra, ellenőrzi a kapott és várt adatok hiánytalanságát, a jelszavak egyezőségét valamint a felhasználó létezését az adatbázisban. Sikeres ellenőrzések esetén létrehozza a megfelelő session-t a felhasználónak.
-logout() -  Törli az összes sessiont, ezzel kijelentkeztetve a felhasználót.
-passwordCompare() – Összeveti a felhasználó által megadott jelszó kódolt értékét az adatbázisban tárolttal. Igaz/hamis értékekkel tér vissza.
-hashPassword($pw) – bcrypt kódolja a $pw változóban kapott értéket, majd visszatér a kódolt szöveggel.
-getUserData($username, $conn) – Lekérdezi az adatbázisból a $username paraméterből kapott felhasználót. Találat esetén visszatér a felhasználó adataival, egyéb esetben ’hamis’ értékkel tér vissza.

Kapcsolati űrlap (ContactController)
Alapelve: A weboldal rendelkezik egy kapcsolat felvételi űrlappal. (/contact)
A beérkezett kapcsolat felvételi üzenetek az oldal által használt MySQL adatbázisba kerülnek mentésre.
Regisztrált és nem regisztrált felhasználók egyaránt kitölthetik az űrlapot.
Megvalósítás:
Az ApplicatonController példányosítja az ContactController osztályt.  Az index.php-ben előre definiáltak szerint a /sendcontactform POST kéréseket az ContactController send() eljárása kezeli le.
Az ContactController beimportálja és példányosítja a DatabaseController-t, amely felelős a MySQLi kapcsolatért.
ContactController
- send() -  Kapott és elvárt adatok hiányosságának ellenőrzése, majd mentés adatbázisba.
- getMessage() -  Eddigi üzenetek lekérdezése az adatbázisból.

Galéria - képfeltötés (ImageController)
Alapelve: A weboldal rendelkezik egy fotó galériával. (/gallery)
A fényképeket a weboldal egy kijelölt mappából (Content/Images/Gallery), dinamikusan tölti be.
Regisztrált felhasználók tölthetnek fel képeket. (Fájl méret < 5MB, JPG,PNG,GIF)
Megvalósítás:
Az ApplicatonController példányosítja az ImageController osztályt.  Az index.php-ben előre definiáltak szerint a /uploadimg POST kéréseket az ImageController upload() eljárása kezeli le.
ImageController
- upload() – Beérkezett adatokat ellenőrzi (van-e csatolmány, csatolmány mérete, kiterjesztése), majd feltölti azt a megadott mappába. 

Fejlesztési lehetőségek:
- Teljes MVC modell felépítése. 
- Authentication middleware 
- JWT Token autentikáció
- Error handlingController
- Design Komponensek létrehozása, újrahasznosítása -> View tödelése
- COOKIE alapú login -> "Maradjon bejelentkezve" 
- AJAX kérések, nem frissülő oldal
